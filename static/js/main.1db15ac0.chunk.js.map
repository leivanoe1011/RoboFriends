{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","website","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAuEeA,EA/DF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC5B,OACI,yBAAKC,UAAY,uDACb,yBAAKC,IAAM,SAASC,IAAG,+BAA4BN,EAA5B,cACvB,6BACI,gCAAMC,EAAN,KAEA,+BAAKC,EAAL,KAEA,+BAAKC,MCSNI,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAOD,EACPX,GAAMU,EAAKV,GACXC,KAAQS,EAAKT,KACbC,MAASQ,EAAKR,MACdC,QAAWO,EAAKP,eCG7BU,EAfG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAY,OAEb,2BACIA,UAAY,mCACZY,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCKbI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,uBAAwBC,OAAQ,UACvEJ,EAAMK,WCqDJC,G,kBAtDX,aAAe,IAAD,8BACV,+CAkBJC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAnBzC,EAAKC,MAAQ,CAITxB,OAAQ,GACRM,YAAa,IAPP,E,iFAWO,IAAD,OAGhBmB,MAAM,8CACDC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAUpC,IAAD,EAEyBC,KAAKN,MAA5BxB,EAFF,EAEEA,OAAQM,EAFV,EAEUA,YAETyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACjC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAGzD,OAAQlC,EAAOoC,OAIV,yBAAKxC,UAAY,MACd,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWW,aAAgBuB,KAAKX,iBAEhC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnB,OAAU+B,MARhC,8C,GArCUM,c,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SDwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.1db15ac0.chunk.js","sourcesContent":["\nimport React from 'react';\n\n\n// Here we going to Destructure the Function\n// There are two methods to Destructure the function\n// This is the preferred Destructured method. \n// The Size of the Cards has to be dynamic as well.\nconst Card = ({id, name, email, website }) => {\n    return (\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt = 'robots' src = {`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2> {name} </h2>\n                \n                <p> {email} </p>\n\n                <p> {website}</p>\n            </div>\n        </div>\n\n    );\n}\n\n\n// This is the second Destructured method. \n// const Card = (props) => {\n//     const {id, name, email } = props;\n//     return (\n//         <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n//             <img alt = 'robots' src = {`https://robohash.org/${id}?200x200`} />\n//             <div>\n//                 <h2> {name} </h2>\n//                 <p> {email} </p>\n//             </div>\n//         </div>\n\n//     );\n// }\n\n\n\n// Below we are passing Props instead, to ensure the code is dynamic. \n// Substituted the Single Quotes with Tilde (`) under the SRC element\n// const Card = (props) => {\n//     return (\n//         <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n//             <img alt = 'robots' src = {`https://robohash.org/${props.id}?200x200`} />\n//             <div>\n//                 <h2> props.name </h2>\n//                 <p> props.email </p>\n//             </div>\n//         </div>\n\n//     );\n// }\n\n// This is the original function design; however, this is not dynamic (static). \n// const Card = () => {\n//     return (\n//         <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n//             <img alt = 'robots' src = 'https://robohash.org/text?200x200'></img>\n//             <div>\n//                 <h2> Jane Doe </h2>\n//                 <p> doe.jane@gmail.com </p>\n//             </div>\n//         </div>\n\n//     );\n// }\n\nexport default Card;\n\n","\nimport React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {     \n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key = {i} \n                            id = {user.id} \n                            name = {user.name} \n                            email = {user.email} \n                            website = {user.website}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\n\nexport default CardList;\n\n\n// Below is the old code\n\n\n// Second Iteration of the Dynamic Function\n// Removed the reference to Robots within the Return of the Card and used USER instead\n// const CardList = ({robots}) => {\n//     return (\n//         <div>\n//             {     \n//                 robots.map((user, i) => {\n//                     return (\n//                         <Card \n//                             key = {i} \n//                             id = {robots[i].id} \n//                             name = {robots[i].name} \n//                             email = {robots[i].email} \n//                         />\n//                     );\n//                 })\n//             }\n//         </div>\n//     );\n// }\n\n\n\n// This is the First iteration of the Dynamic Function\n// We removed the Const Card Array where it was defined. \n// const CardList = ({robots}) => {\n//     const cardsArray = robots.map((user, i) => {\n//         return <Card \n//             key = {i} \n//             id = {robots[i].id} \n//             name = {robots[i].name} \n//             email = {robots[i].email} />\n//         }\n//     )\n//     return (\n//         <div>\n//             {cardsArray}\n//         </div>\n//     );\n// }\n\n\n\n// This is the original Static Function\n// const CardList = ({robots}) => {\n//     return (\n//         <div>\n//             <Card id = {robots[0].id} name = {robots[0].name} email = {robots[0].email} />\n//             <Card id = {robots[1].id} name = {robots[1].name} email = {robots[1].email} />\n//             <Card id = {robots[2].id} name = {robots[2].name} email = {robots[2].email} />\n//         </div>\n//     );\n// }\n\n\n\n\n\n\n","\nimport React from 'react';\n\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (    \n        <div className = 'pa2' > \n\n            <input \n                className = 'pa3 ba b--green bg-lightest-blue' \n                type = 'search' \n                placeholder = 'Search Robots' \n                onChange = {searchChange}\n            />\n        </div>\n    );\n}\n\n\nexport default SearchBox;\n\n\n\n\n\n// Below is old code\n\n\n// const SearchBox = () => {\n//     return (    \n//         // Below added some padding to the DIV Element\n//         <div className = 'pa2' > \n//         {/* \n//             Added Some padding to the input box as well. \n//             When you click in the box, the border will go from Green to Blue\n//          */}\n//             <input \n//                 className = 'pa3 ba b--green bg-lightest-blue' \n//                 type = 'search' \n//                 placeholder = 'Search Robots' \n//             />\n//         </div>\n//     );\n// }\n\n","\n\n// JPX allows for the Styles to be populated below without a CSS. \n// This is possible because of REACT.\nimport React from 'react';\n\n\n// Children will allow us to pass an Element within an Element. \n// At the parent level we are Scrolling the Card List Component.\nconst Scroll = (props) => {\n    return (\n        <div style = {{overflowY: 'scroll', border: '1px solid light-blue', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","\n\nimport React, {Component} from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport './App.css'\n\n\nclass App extends Component  {\n\n    constructor() {\n        super()\n        this.state = {\n            // be sure to remove the Curly Brackets {robots} \n            // else, you will get a function error\n            // robots: robots, \n            robots: [], \n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        \n        // this.setState ({robots: robots});\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => {return response.json()})\n            .then(users => {this.setState({robots:users})});\n    }\n\n    onSearchChange = (event) => {\n        \n        this.setState({searchField: event.target.value})\n\n        // console.log(filteredRobots);\n    }\n\n    render() {\n        \n        const {robots, searchField} = this.state;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return !robots.length ?\n        <h1>LOADING!!!</h1> :\n        (\n             // tc class will Center all the object below\n             <div className = 'tc' >\n                <h1 className = 'f2' >RoboFriends</h1>\n                <SearchBox searchChange = {this.onSearchChange}/>\n                \n                <Scroll>\n                    <CardList robots = {filteredRobots} /> \n                </Scroll>\n             \n             </div>\n\n        );\n       \n    }\n}\n\n\nexport default App;\n\n\n\n// Below is the old code\n\n\n// import {robots} from './Robots'; // robots is the object exported from the Robots.js library\n\n\n// State Object\n// Contains the Array of Robots\n// Also, the Search Box entry\n// const state = {\n//     robots: {robots},\n//     searchField: ''\n// }\n\n\n\n// const App = () => {\n//     return (\n//         // tc class will Center all the object below\n//         <div className = 'tc' >\n//             <h1>RoboFriends</h1>\n//             <SearchBox />\n//             <CardList robots = {robots} />\n//         </div>\n//     );\n// }\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>\n    , document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}